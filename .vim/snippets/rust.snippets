priority -50

snippet     mod_test "mod test" b
#[cfg(test)]
mod tests {
	use super::*;

	#[test]
	fn ${0:test_function_name}() {
	}
}
endsnippet

snippet     test_logger "env_logger for unit-test" b
extern crate env_logger;

fn init() {
	let _ = env_logger::builder().is_test(true).try_init();
}
endsnippet

snippet     derive_debug "derive debug" b
#[derive(Debug)]
endsnippet

snippet     dead_code "allow dead_code" b
#[allow(dead_code)]
endsnippet

snippet     project_root "project root" b
let mut project_root = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
endsnippet

snippet     log_debug_enable "Enable debug mode in env_logger" b
std::env::set_var("RUST_LOG", "debug");
endsnippet

snippet     to_result "Option to Result" i
ok_or(format_err!("${0:error_message}"))
endsnippet

snippet     arg_path "function argument for path" i
<P: AsRef<Path>>
endsnippet

snippet     arg_str "function argument for str" i
<S: Into<String>>
endsnippet

snippet     ret_result "return Result" i
-> Result<(), Error>
endsnippet

snippet     convert_path_to_string "convert Path to String" i
${0:path}.as_ref().to_str().ok_or(format_err!("convert error"))?
endsnippet

snippet     convert_pathbuf_to_string "convert PathBuf to String" i
${0:path}.into_os_string().into_string()?
endsnippet

snippet     sh_command "Shell command execute" b
let output = Command::new("")
	.args(&[""])
	.current_dir("")
	.output()?;
endsnippet

snippet     sh_command_async "Shell command execute (spawn)" b
let child = std::process::Command::new("")
	.args(&[""])
	.current_dir("")
	.spawn()?;
child.wait()?;
endsnippet

snippet     async_future "Async execute using future" b
let ${0:val_name} = Arc::new(Mutex::new(Vec::<${1:test_function_name}>::new()));
let pool = executor::ThreadPool::new()?;
let mut futures = vec![];
for repo in repos.clone() {
	let ${0:val_name} = Arc::clone(&${0:val_name});
	let future = async move {
		match ${2:async_func_name}() {
			Ok(v) => ${0:val_name}.lock().unwrap().push(v),
			Err(e) => {}
		}
	};
	futures.push(pool.spawn_with_handle(future)?);
}
executor::block_on(futures::future::join_all(futures));
let g = Arc::try_unwrap(${0:val_name}).map_err(|e| format_err!("Async Error {:?}", e))?;
endsnippet
